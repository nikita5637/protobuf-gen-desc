// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example_pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleService1Client is the client API for ExampleService1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleService1Client interface {
	// ExampleServiceMethod1 ...
	ExampleServiceMethod1(ctx context.Context, in *ExampleServiceMethod1Request, opts ...grpc.CallOption) (*ExampleServiceMethod1Response, error)
	// ExampleServiceMethod2 ...
	ExampleServiceMethod2(ctx context.Context, in *ExampleServiceMethod2Request, opts ...grpc.CallOption) (*ExampleServiceMethod2Response, error)
}

type exampleService1Client struct {
	cc grpc.ClientConnInterface
}

func NewExampleService1Client(cc grpc.ClientConnInterface) ExampleService1Client {
	return &exampleService1Client{cc}
}

func (c *exampleService1Client) ExampleServiceMethod1(ctx context.Context, in *ExampleServiceMethod1Request, opts ...grpc.CallOption) (*ExampleServiceMethod1Response, error) {
	out := new(ExampleServiceMethod1Response)
	err := c.cc.Invoke(ctx, "/example.ExampleService1/ExampleServiceMethod1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService1Client) ExampleServiceMethod2(ctx context.Context, in *ExampleServiceMethod2Request, opts ...grpc.CallOption) (*ExampleServiceMethod2Response, error) {
	out := new(ExampleServiceMethod2Response)
	err := c.cc.Invoke(ctx, "/example.ExampleService1/ExampleServiceMethod2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleService1Server is the server API for ExampleService1 service.
// All implementations must embed UnimplementedExampleService1Server
// for forward compatibility
type ExampleService1Server interface {
	// ExampleServiceMethod1 ...
	ExampleServiceMethod1(context.Context, *ExampleServiceMethod1Request) (*ExampleServiceMethod1Response, error)
	// ExampleServiceMethod2 ...
	ExampleServiceMethod2(context.Context, *ExampleServiceMethod2Request) (*ExampleServiceMethod2Response, error)
	mustEmbedUnimplementedExampleService1Server()
}

// UnimplementedExampleService1Server must be embedded to have forward compatible implementations.
type UnimplementedExampleService1Server struct {
}

func (UnimplementedExampleService1Server) ExampleServiceMethod1(context.Context, *ExampleServiceMethod1Request) (*ExampleServiceMethod1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleServiceMethod1 not implemented")
}
func (UnimplementedExampleService1Server) ExampleServiceMethod2(context.Context, *ExampleServiceMethod2Request) (*ExampleServiceMethod2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleServiceMethod2 not implemented")
}
func (UnimplementedExampleService1Server) mustEmbedUnimplementedExampleService1Server() {}

// UnsafeExampleService1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleService1Server will
// result in compilation errors.
type UnsafeExampleService1Server interface {
	mustEmbedUnimplementedExampleService1Server()
}

func RegisterExampleService1Server(s grpc.ServiceRegistrar, srv ExampleService1Server) {
	s.RegisterService(&ExampleService1_ServiceDesc, srv)
}

func _ExampleService1_ExampleServiceMethod1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleServiceMethod1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService1Server).ExampleServiceMethod1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleService1/ExampleServiceMethod1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService1Server).ExampleServiceMethod1(ctx, req.(*ExampleServiceMethod1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService1_ExampleServiceMethod2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleServiceMethod2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService1Server).ExampleServiceMethod2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleService1/ExampleServiceMethod2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService1Server).ExampleServiceMethod2(ctx, req.(*ExampleServiceMethod2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleService1_ServiceDesc is the grpc.ServiceDesc for ExampleService1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService1",
	HandlerType: (*ExampleService1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleServiceMethod1",
			Handler:    _ExampleService1_ExampleServiceMethod1_Handler,
		},
		{
			MethodName: "ExampleServiceMethod2",
			Handler:    _ExampleService1_ExampleServiceMethod2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}

// ExampleService2Client is the client API for ExampleService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleService2Client interface {
	// ExampleServiceMethod3 ...
	ExampleServiceMethod3(ctx context.Context, in *ExampleServiceMethod3Request, opts ...grpc.CallOption) (*ExampleServiceMethod3Response, error)
	// ExampleServiceMethod4 ...
	ExampleServiceMethod4(ctx context.Context, in *ExampleServiceMethod4Request, opts ...grpc.CallOption) (*ExampleServiceMethod4Response, error)
}

type exampleService2Client struct {
	cc grpc.ClientConnInterface
}

func NewExampleService2Client(cc grpc.ClientConnInterface) ExampleService2Client {
	return &exampleService2Client{cc}
}

func (c *exampleService2Client) ExampleServiceMethod3(ctx context.Context, in *ExampleServiceMethod3Request, opts ...grpc.CallOption) (*ExampleServiceMethod3Response, error) {
	out := new(ExampleServiceMethod3Response)
	err := c.cc.Invoke(ctx, "/example.ExampleService2/ExampleServiceMethod3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService2Client) ExampleServiceMethod4(ctx context.Context, in *ExampleServiceMethod4Request, opts ...grpc.CallOption) (*ExampleServiceMethod4Response, error) {
	out := new(ExampleServiceMethod4Response)
	err := c.cc.Invoke(ctx, "/example.ExampleService2/ExampleServiceMethod4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleService2Server is the server API for ExampleService2 service.
// All implementations must embed UnimplementedExampleService2Server
// for forward compatibility
type ExampleService2Server interface {
	// ExampleServiceMethod3 ...
	ExampleServiceMethod3(context.Context, *ExampleServiceMethod3Request) (*ExampleServiceMethod3Response, error)
	// ExampleServiceMethod4 ...
	ExampleServiceMethod4(context.Context, *ExampleServiceMethod4Request) (*ExampleServiceMethod4Response, error)
	mustEmbedUnimplementedExampleService2Server()
}

// UnimplementedExampleService2Server must be embedded to have forward compatible implementations.
type UnimplementedExampleService2Server struct {
}

func (UnimplementedExampleService2Server) ExampleServiceMethod3(context.Context, *ExampleServiceMethod3Request) (*ExampleServiceMethod3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleServiceMethod3 not implemented")
}
func (UnimplementedExampleService2Server) ExampleServiceMethod4(context.Context, *ExampleServiceMethod4Request) (*ExampleServiceMethod4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleServiceMethod4 not implemented")
}
func (UnimplementedExampleService2Server) mustEmbedUnimplementedExampleService2Server() {}

// UnsafeExampleService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleService2Server will
// result in compilation errors.
type UnsafeExampleService2Server interface {
	mustEmbedUnimplementedExampleService2Server()
}

func RegisterExampleService2Server(s grpc.ServiceRegistrar, srv ExampleService2Server) {
	s.RegisterService(&ExampleService2_ServiceDesc, srv)
}

func _ExampleService2_ExampleServiceMethod3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleServiceMethod3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService2Server).ExampleServiceMethod3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleService2/ExampleServiceMethod3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService2Server).ExampleServiceMethod3(ctx, req.(*ExampleServiceMethod3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService2_ExampleServiceMethod4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleServiceMethod4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleService2Server).ExampleServiceMethod4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ExampleService2/ExampleServiceMethod4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleService2Server).ExampleServiceMethod4(ctx, req.(*ExampleServiceMethod4Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleService2_ServiceDesc is the grpc.ServiceDesc for ExampleService2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService2",
	HandlerType: (*ExampleService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleServiceMethod3",
			Handler:    _ExampleService2_ExampleServiceMethod3_Handler,
		},
		{
			MethodName: "ExampleServiceMethod4",
			Handler:    _ExampleService2_ExampleServiceMethod4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
