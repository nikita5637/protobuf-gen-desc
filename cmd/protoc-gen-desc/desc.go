package main

import (
	"fmt"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	runtimePackage = protogen.GoImportPath("github.com/grpc-ecosystem/grpc-gateway/v2/runtime")

	deprecationComment = "// Deprecated: Do not use."
)

type serviceGenerateHelperInterface interface {
	genSwaggerEmbedding(file *protogen.File, g *protogen.GeneratedFile)
	genStruct(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service)
	genConstructor(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service)
	genGateway(g *protogen.GeneratedFile, service *protogen.Service)
	genGRPC(g *protogen.GeneratedFile, service *protogen.Service)
}

type serviceGenerateHelper struct{}

func (serviceGenerateHelper) genSwaggerEmbedding(file *protogen.File, g *protogen.GeneratedFile) {
	embedString := fmt.Sprintf("//go:embed %s.swagger.json", strings.TrimSuffix(file.Desc.Path(), filepath.Ext(file.Desc.Path())))

	g.P(embedString)
	g.P("var swaggerJSON []byte")
	g.P()
	g.P("// SwaggerDef returns swagger definition for this package")
	g.P("func SwaggerDef() []byte {")
	g.P("	return swaggerJSON")
	g.P("}")
	g.P()
}

func (serviceGenerateHelper) genStruct(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("// ", getDescriptionName(service), " is the description struct for ", service.GoName, " service.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	g.AnnotateSymbol(getDescriptionName(service), protogen.Annotation{Location: service.Location})
	g.P("type ", getDescriptionName(service), " struct {")
	g.P("implementation ", getServerName(service))
	g.P("}")
	g.P()
}

func (serviceGenerateHelper) genConstructor(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("// New", getDescriptionName(service), " is description constructor method for ", service.GoName, " service.")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.P("func New", getDescriptionName(service), "(implementation ", getServerName(service), ") *", getDescriptionName(service), " {")
	g.P("return &", getDescriptionName(service), "{implementation}")
	g.P("}")
	g.P()
}

func (serviceGenerateHelper) genGateway(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("func (d *", getDescriptionName(service), ") RegisterGateway(ctx ", g.QualifiedGoIdent(contextPackage.Ident("Context")), ", mux *", runtimePackage.Ident("ServeMux"), ") error {")
	g.P("return Register", service.GoName, "HandlerServer(ctx, mux, d.implementation)")
	g.P("}")
	g.P()
}

func (serviceGenerateHelper) genGRPC(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("func (d *", getDescriptionName(service), ") RegisterGRPC(server *", grpcPackage.Ident("Server"), ") {")
	g.P("Register", service.GoName, "Server(server, d.implementation)")
	g.P("}")
	g.P()

}

var helper serviceGenerateHelperInterface = serviceGenerateHelper{}

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

// generateFile generates a _desc.pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_desc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))

	g.P("// Code generated by protoc-gen-desc. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-desc v", version)
	g.P("// - protoc             ", protocVersion(gen))

	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}

	g.P()

	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))

	g.P("package ", file.GoPackageName)
	g.P()

	generateFileContent(gen, file, g)

	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the service description.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("import (")
	g.P("_ \"embed\"")
	g.P(")")

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("// Requires gRPC-Go v1.62.0 or later.")
	g.P("const _ = ", grpcPackage.Ident("SupportPackageIsVersion7")) // When changing, update version number above.
	g.P()

	helper.genSwaggerEmbedding(file, g)

	for _, service := range file.Services {
		genServiceDescription(gen, file, g, service)
	}
}

func genServiceDescription(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	helper.genStruct(file, g, service)
	helper.genConstructor(file, g, service)
	helper.genGateway(g, service)
	helper.genGRPC(g, service)
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
		g.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
		g.P()
	}
}

func getDescriptionName(service *protogen.Service) string {
	return service.GoName + "Description"
}

func getServerName(service *protogen.Service) string {
	return service.GoName + "Server"
}
